[tool.ruff]
line-length = 100
target-version = "py312"

lint.select = [
    "F",  # pyflakes
    "E",  # pycodestyle-errors
    "W",  # pycodestyle-warnings
    "C90",  # mccabe
    "I",  # isort
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC",  # flake8-async
    "S",  # flake8-bandit
    "BLE",  # flake8-blind-except
    # "FBT",  # flake8-boolean-trap (completely forbids bools in signatures)
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    # "COM",  # flake8-commas (trailing comma related rules)
    # "CPY",  # copyright-related rules (each file must have copyright info at top)
    "C4",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    # "DJ",  # flake8-django (rules for Django which we don't use)
    # "EM",  # flake8-errmsg (error messages must have preassigned variable names)
    "EXE",  # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    # "PTH",  # flake8-use-pathlib (forbids the use of os in favor of pathlib)
    "TD",  # flake8-todos
    "FIX",  # flake8-fixme (forbids the use of TODO items)
    "ERA",  # eradicate
    "PD",  # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",  # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy-specific rules
    # "AIR",  # airflow-specific rules (rules for Airflow which we don't use)
    "PERF",  # perflint
    "RUF",  # ruff-specific rules
]

lint.ignore = [
    "D203",  # 1 blank line required before class docstring (opposite of D211)
    "D205",  # 1 blank line required between summary line and description
    "D212",  # Multi-line docstring summary should start at the first line (opposite of D213)
    "D400",  # First line should end with a period
    "D415",  # First line should end with a period, question mark, or exclamation point
    "D401",  # First line of docstring should be in imperative mood
    "D406", # Section name should end with a newline
    "D407",  # Missing dashed underline after section Args/Returns/Raises
    "D413", # Missing blank line after last section
    "TRY003",  # Avoid specifying long messages outside the exception class
    "B028",  # No explicit `stacklevel` keyword argument found for a `warnings.warn()` call
    "D418",  # Function decorated with `@overload` shouldn't contain a docstring
    "PD011",  # Use `.to_numpy()` instead of `.values`
    "PT006",  # Wrong name(s) type in `@pytest.mark.parametrize`, expected `tuple`
    "TD002",  # Missing author in TODO; try: `# TODO @<author_name>: ...`
    "TD003",  # Missing issue link on the line following this TODO
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN204",  # Missing return type annotation for special method `__init__`
    "ISC001",  # single-line-implicit-string-concatenation
]

[lint.tool.ruff.pydocstyle]
convention = "google"